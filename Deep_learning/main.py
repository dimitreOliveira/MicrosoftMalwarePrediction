import pandas as pd
from Deep_learning.model import *
from Deep_learning.data_aux import *

tf.logging.set_verbosity(tf.logging.INFO)

# Parameters
TRAIN_PATH = '../Data/train_numerical.csv'
VALIDATION_PATH = '../Data/val_numerical.csv'
TEST_PATH = '../Data/test_numerical.csv'
MODEL_NAME = 'model_numerical'
MODEL_DIR = '../Model backlog/Tensorflow/' + MODEL_NAME
SUBMISSION_NAME = ('submission_%s.csv' % MODEL_NAME)

# Model parameters
LEARNING_RATE = 0.001
HIDDEN_UNITS = [32, 16]
TRAIN_STEPS = 50000
VALIDATION_STEPS = 1000
BATCH_SIZE = 128

CSV_COLUMNS = ['AVProductsEnabled', 'AVProductsInstalled', 'Census_InternalPrimaryDiagonalDisplaySizeInInches',
               'Census_InternalPrimaryDisplayResolutionVertical', 'Census_ProcessorCoreCount',
               'Census_SystemVolumeTotalCapacity', 'Census_TotalPhysicalRAM', 'RtpStateBitfield', 'HasDetections']
LABEL_COLUMN = 'HasDetections'
DEFAULTS = [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]]

INPUT_COLUMNS = [
    # Raw data columns
    tf.feature_column.numeric_column('AVProductsEnabled'),
    tf.feature_column.numeric_column('AVProductsInstalled'),
    tf.feature_column.numeric_column('Census_InternalPrimaryDiagonalDisplaySizeInInches'),
    tf.feature_column.numeric_column('Census_InternalPrimaryDisplayResolutionVertical'),
    tf.feature_column.numeric_column('Census_ProcessorCoreCount'),
    tf.feature_column.numeric_column('Census_SystemVolumeTotalCapacity'),
    tf.feature_column.numeric_column('Census_TotalPhysicalRAM'),
    tf.feature_column.numeric_column('RtpStateBitfield')
]

train_spec = tf.estimator.TrainSpec(input_fn=read_dataset(TRAIN_PATH, mode=tf.estimator.ModeKeys.TRAIN,
                                                          features_cols=CSV_COLUMNS, label_col=LABEL_COLUMN,
                                                          default_value=DEFAULTS, batch_size=BATCH_SIZE),
                                    max_steps=TRAIN_STEPS)
eval_spec = tf.estimator.EvalSpec(input_fn=read_dataset(VALIDATION_PATH, mode=tf.estimator.ModeKeys.EVAL,
                                                        features_cols=CSV_COLUMNS, label_col=LABEL_COLUMN,
                                                        default_value=DEFAULTS, batch_size=BATCH_SIZE),
                                  steps=VALIDATION_STEPS, throttle_secs=600)

optimizer = tf.train.AdamOptimizer(learning_rate=LEARNING_RATE)
estimator = build_deep_estimator(MODEL_DIR, HIDDEN_UNITS, optimizer, INPUT_COLUMNS)

tf.estimator.train_and_evaluate(estimator, train_spec=train_spec, eval_spec=eval_spec)

# Make predictions
dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'OrganizationIdentifier':                               'float16',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'SmartScreen':                                          'category',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_FlightRing':                                    'category',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }

test_raw = pd.read_csv(TEST_PATH, dtype=dtypes)
prediction = estimator.predict(pandas_test_input_fn(test_raw))

prediction_df = pd.DataFrame(prediction)
output_submission(test_raw, prediction_df, 'MachineIdentifier', 'HasDetections', SUBMISSION_NAME)
