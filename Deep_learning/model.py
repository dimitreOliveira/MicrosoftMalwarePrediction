import tensorflow as tf


def build_deep_estimator(model_dir, hidden_units, optimizer, input_columns, run_config=None):
    # Input columns
    (AVProductsEnabled, AVProductsInstalled, Census_InternalPrimaryDiagonalDisplaySizeInInches,
     Census_InternalPrimaryDisplayResolutionVertical, Census_ProcessorCoreCount, Census_SystemVolumeTotalCapacity,
     Census_TotalPhysicalRAM, RtpStateBitfield) = input_columns

    feature_columns = [
        # Numeric columns
        AVProductsEnabled, AVProductsInstalled, Census_InternalPrimaryDiagonalDisplaySizeInInches,
        Census_InternalPrimaryDisplayResolutionVertical, Census_ProcessorCoreCount, Census_SystemVolumeTotalCapacity,
        Census_TotalPhysicalRAM, RtpStateBitfield
    ]

    estimator = tf.estimator.DNNClassifier(
        model_dir=model_dir,
        feature_columns=feature_columns,
        hidden_units=hidden_units,
        optimizer=optimizer,
        config=run_config)

    # Add extra evaluation metric for hyperparameter tuning
    estimator = tf.contrib.estimator.add_metrics(estimator, add_eval_metrics)

    return estimator


def add_eval_metrics(labels, predictions):
    return {
        'auc': tf.metrics.auc(labels, predictions['logistic'])
    }
